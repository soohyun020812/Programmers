'''
문제 설명
좌표평면을 좋아하는 진수는 x축과 y축이 직교하는 2차원 좌표평면에 점을 찍으면서 놀고 있습니다.
진수는 두 양의 정수 k, d가 주어질 때 다음과 같이 점을 찍으려 합니다.
원점(0, 0)으로부터 x축 방향으로 a*k(a = 0, 1, 2, 3 ...),
y축 방향으로 b*k(b = 0, 1, 2, 3 ...)만큼 떨어진 위치에 점을 찍습니다.
원점과 거리가 d를 넘는 위치에는 점을 찍지 않습니다.
예를 들어, k가 2, d가 4인 경우에는
(0, 0), (0, 2), (0, 4), (2, 0), (2, 2), (4, 0) 위치에 점을 찍어 총 6개의 점을 찍습니다.
정수 k와 원점과의 거리를 나타내는 정수 d가 주어졌을 때,
점이 총 몇 개 찍히는지 return 하는 solution 함수를 완성하세요.

제한사항
1 ≤ k ≤ 1,000,000
1 ≤ d ≤ 1,000,000
'''

def solution(k, d):
    answer = 0  # 점의 개수를 셀 변수

    # d의 제곱 값을 구함 (y축의 범위를 계산하는 데 사용)
    d_2 = d ** 2

    # x 좌표는 0부터 시작
    x = 0
    while x <= d:  # x가 d를 넘지 않도록 반복
        y = 0  # y 좌표는 매번 x에 대해 새롭게 시작
        # d_2 - x^2이 제곱근이 될 수 있는 최대 y 값을 구함
        max_v = int((d_2 - x**2) **(0.5))  # (d^2 - x^2) 의 제곱근 계산
        # y 값이 k의 배수로 나누어 떨어지는 값만 세야 하므로 max_v를 k로 나눈 나머지를 구함
        rest = max_v % k
        # k로 나누어 떨어지는 값을 개수만큼 더함
        answer += (max_v - rest) // k + 1  # y 좌표가 k 간격으로 찍을 수 있는 점들의 개수를 더함

        # x를 k 간격으로 증가시킴 (x는 k의 배수만큼만 변화)
        x += k

    # 결과로 답을 반환
    return answer

# 다른사람 코드 풀이
"""
from math import sqrt

def solution(k, d):
    answer = 0
    summ = 0

    for y in range(0, d + 1, k):
        x = d ** 2 - y ** 2
        cnt = sqrt(x) // k + 1
        summ += cnt

    return summ
"""
# d ** 2 = x ** 2 + y ** 2
# x ** 2 = d ** 2 - y ** 2
# y축을 포함한 총 점의 갯수 = x의 길이를 k로 나눈 몫 + 1 (y축은 0, 0 이므로 1 더해줘야 함)
# 시그마 y -> k + 1 (d ** 2 - y ** 2) // 2 + 1
